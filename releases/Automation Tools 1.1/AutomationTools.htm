<html>
<head>
<title>Help content</title>
<link rel=stylesheet type=text/css href="style.css">

<meta name="GENERATOR" content="chmProcessor" >


</head>
</html>

<BODY>
<h1>Automation Tools for TES5Edit<a name=m00></a></h1>
<h2>Installation<a name=m01></a></h2>
<br><br><center><div class="imgbig" style="height:430"><img src="images/img00.png"></img><br>Installing AutomationTools.</div></center>
<p>Automation Tools requires TES5Edit, a Skyrim modding utility that allows for the editing of bethesda plugin and master files, advanced methods of conflict resolution, and the application of scripts.  TES5Edit can be acquired from Nexus Mods <a href="http://www.nexusmods.com/skyrim/mods/25859">here</a>.  It is recommended that you install TES5Edit in your Skyrim directory in a folder titled "TES5Edit" for optimal script usage.</p>

<p>Once you've installed TES5Edit you can install the user scripts included in Automation Tools.  To install AT, simply copy the entire "Edit Scripts" folder included in the AutomationTools archive to the folder containing TES5Edit.exe.  ...and that's it!  Now you can use the scripts in TES5Edit as directed in this documentation file.  Enjoy!</p>



<h2>General TES5Edit Information<a name=m02></a></h2>
<h3>Script Application<a name=m03></a></h3>
<br><center>
<div class="imgleft" style="height:480"><img src="images/img02.png"></img><br>Applying a script to some records.</div><div class="imgright" style="height:480"><img src="images/img01.png"></img><br>Selecting a script from the dropdown menu.</div>
</center>
<p>Before script application you must load the esm and esp files relevant to its application in TES5Edit.  After they're done loading, which you'll know by the message "Background Loader: finished", you can begin applying scripts.</p>

<p>To apply a script you first have to know whether or not it's a script that's applied to selected elements, or one that is applied generally.  In this documentation I specify whether or not you have to select records before applying a given script.</p>

<p>Records can be selected using CTRL+Click or Shift+Click.  Once records are selected you right click one and then choose Apply Script from the dropdown menu.  If no records are selected you can simply right click anywhere in the main window and choose Apply Script from the dropdown menu.</p>

<p>Once you choose Apply Script, a window will come up.  At the top of this window is another dropdown menu from which you can choose the script you want to apply.  This menu is alphabetized, so finding scripts in it should be easy.  Once you've selected your script you can simply click OK to apply it.</p>


<h3>Elements, Paths, and Lists<a name=m04></a></h3>
<br><center>
<div class="imgleft"><img src="images/img06.png"></img><br>Element signatures and names highlighted.</div><div class="imgright"><img src="images/img08.png"></img><br>List of elements with indexes noted</div>
</center>
<p>Many of the scripts in this package will ask for "paths" to elements.  These paths are fairly easy to learn.  If you select a record in TES5Edit you'll see the values associated with the record appear in the "view" window.  Within this window you should see labeled elements.  E.g. RNAM - Race, DNAM - Data, Male world model, Female world model, KWDA - Keywords, EDID - Editor ID, FULL - Name, etc.  Some of these elements may have elements stored inside of them.  E.g. inside the BOD2 - Biped Body Template element on an ARMO record you'll see the subelements First Person Flags, General Flags, Unused, and Armor Type.  A "path" is a means to communicate to TES5Edit what element you want to deal with for a given procedure or function.</p>

<p>You'll notice many elements will have a 4-letter abbreviation, a hyphen, and then a name.  The 4-letter abbreviation is called a signature.  When you're trying to communicate a path to TES5Edit you can refer to the element by it's full name, including the signature.  E.g. EDID - Editor ID.  Alternatively you can refer to it using just its signature.  E.g. EDID.  From there you can use slashes to denote paths to interior elements.  E.g. DATA\Value, DATA\Weight, BOD2\Armor Type, Male world model\MOD2, OBND\X1, etc.</p>

<p>When asked for a path you can specify any path to an existing element.  It's really quite easy once you get the hang of it.</p>

<p>Recent work with TES5Edit has led to the creation of a new function which allows the usage of indexed paths.  These are paths that allow you to get at elements within lists of elements.  But seeing as I having explained lists of elements yet, I'll do that next.</p>

<p>Some elements in records in TES5Edit may contain elements that can contain an indefinite amount of other, identically named elements.  E.g. the Conditions, Factions, or KWDA - Keywords elements.  These are called Element Lists.  You cannot use traditional paths to get to elements inside of an element list.  Doing so will only give you access to the first element in the list.  This is where indexes come in.  Each element in an Element List is stored at a particular index.  The first element in the list is at index 0, the second at index 1, the third at index 2, etc.  You can use an indexed path to refer to these elements, and the elements inside of them.  For instance, if you want to refer to the fourth element in the element list at KWDA - Keywords you could say: KWDA\[3].  Or, if you wanted to refer to the Function element in the second element in the element list at Conditions, you could say: Conditions\[1]\CTDA - \Function.  You can also use the [index] notation for elements that aren't in lists, but I'd recommend just sticking to writing out the signature or name of the element instead.</p>

<p>Anywho, that should be all you need to know about Elements, Paths, and Element Lists.  Good luck!</p>



<h2>mteFunctions.pas<a name=m05></a></h2>
<h3>Summary:<a name=m06></a></h3>
<p>mteFunctions.pas is a unit that contains functions that are used by my other scripts.  These functions are called from it via the "uses" parameter early on in each script.  You can use these functions yourself if you wish.  This file is required for any of the other scripts included in this package to function.  Removing, editing, renaming, or improperly installing it will make it so the other scripts in this package can no longer execute correctly.</p>

<h3>Functions:<a name=m07></a></h3>
<p>You can see the script's code for a list of the functions included in this unit, and how to use them.  There is a section before each function that tells you how to use them and gives an example.  Simply add "uses mteFunctions;" after your unit declaration in a TES5Edit script to gain access to the functions contained in this unit.</p>



<h2>NPC Generator<a name=m08></a></h2>
<br><br><center>
<div class="imgleft" style="height:480"><img src="images/img11.png"></img><br>The NPC generator window.</div><div class="imgright" style="height:480"><img src="images/img10.png"></img><br>Head part assets to be used in NPC generation.</div>
</center>
<p>The NPC Generator generates NPCs using loaded assets.  Everything is randomly generated within certain constraints.  No two NPCs will look exactly the same, and generated NPCs look <i>good</i>.  Can generate up to 100 NPCs per script run, and generates them at a rate of about 2 per second.</p>
<h3>Basic Usage:<a name=m09></a></h3>
<dl>
<dt><strong>Step 1:</strong> Load the assets you want to use in NPC generation into TES5Edit (the .esp files associated with them).  E.g. ApachiiHair.esm.  List of supported asset types:</dt>
<ul><li>Outfits (OTFT)</li>
<li>Color records (CLFM)</li>
<li>Voice Types (VTYP)</li>
<li>Head Parts (HDPT)</li>
<li>Races (RACE)  [Note: The script doesn't support custom races yet.]</li>
<li>NPCs (NPC_)</li></ul>
<dt><strong>Step 2:</strong> Apply script, no record selection necessary.</dt>
<dt><strong>Step 3:</strong> Specify the settings you wish to use for the NPC generation.  Settings listed below:</dt>
<ul><li>Number of NPCs: Integer number from 1-100.  This is how many NPCs will be generated by the script.</li>
<li>Template NPC: You can choose an NPC to use as a template using this field.  This isn't used for the TPLT element in the generated NPCs, it's the base record that's copied for each created NPC.</li>
<li>Gender: Random, Male, or Female.  All generated NPCs will be the gender specified here.  If random is chosen, each generated NPC will be randomly male or female.</li>
<li>Race: Random, or one of the races in the dropdown menu.  All generated NPCs will be the race specified here.  If random is chosen, each generated NPC will have a random race from the list.  Modded races may or may not work with the NPC generator, depending on how the race's assets are implemented.</li>
<li>Scar chance: A percentage value from 1 to 100.  This is the chance that the NPC will be given a randomly chosen scar.</li>
<li>Last name chance: A percentage value from 1 to 100.  This is the chance that the NPC will be given a last name.</li>
<li>Vary NPC height: Enable this to vary NPC height from the default race value.  The variance is specified in the two edit boxes below.  (E.g. default values are from Race Height - 5 to Race Height + 5)</li></ul>
<dt><strong>Step 4:</strong> Click OK, then select the file you wish to create the NPCs in, or create a new one.</dt>
<dt><strong>Step 5:</strong> Watch it go!  There shouldn't be any errors with NPC generation unless you have improperly installed/edited the .txt files the generator uses for names and outfits.  (some custom assets could cause issues as well, though I've never encounted such an error.)</dt>
<dt><strong>Step 5:</strong> Close TES5Edit and save the file you stored the NPCs in.</dt>
<dt><strong>Step 6:</strong> Open the file in which you stored the NPCs with the Creation Kit as the active file.  Select all the NPCs you generated and press Ctrl+Alt+F4 to generate NPC face geometry.  This will make certain the NPCs appear ingame correctly.  You can also place the NPCs somewhere in the world for testing if you have a specific cell in mind.  Alternatively, you can just use the player.placeatme command to place the NPCs while ingame.  You'll have to know their FULL names or FormIDs if you wish to use the placeatme method (so you may want to take note of those).</dt>
<dt><strong>Step 7:</strong> Close the CK, saving the file if prompted.  You can now go into Skyrim and test the NPCs out.</dt>
</dl>


<h3>Text Document Customization:<a name=m10></a></h3>
<p>In the subfolder "npcg" in your Edit Scripts folder you will find a bunch of text documents.  All of these text documents, excluding outfits.txt, are where names for the NPCs are stored.  There are three text documents per race in this folder:
<ul><li>&lt;Race&gt;FemaleNames</li>
<li>&lt;Race&gt;MaleNames</li>
<li>&lt;Race&gt;FamilyNames</li></ul>
The FemaleNames document is the first names given to females of the race; the MaleNames document is the first names given to males of the race; and the FamilyNames document is the last names given to NPCs of the race.</p>

<p>In addition to these race specific documents there is are documents called GeneralFemaleNames, GeneralMaleNames, and GeneralFamilyNames.  These documents are blank by default, but names added to them will be used by NPCs of all races.  So, as you knew was coming, you can modify these text documents to add or remove names as you see fit.  The names currently used were downloaded from UESP thanks to FiftyTifty.</p>

<p>In addition to NPC names, you can also modify the outfits available to NPCs generated with the script.  All you have to do is add or remove Outfit Editor IDs from the outfit.txt document.  Invalid EditorIDs will be ignored, but having too many invalid entries can slow down script execution.  To verify that your outfit entries are functioning correctly see the user variables section.</p>


<h3>User Variables:<a name=m11></a></h3>
<center><div class="imgright" style="height:490px;margin-left:10px"><br><img src="images/img13.png"></img><br>User variables section of the NPC Generator script.</div></center>
<p>The script has thirteen user variables that you can enable/disable in the script's code.  You will find a section of the script immediately after the declaration of global variables (line 61 as of v1.4) from which you can control these variables.</p>

<p>Ten of the available variables are skip booleans.  You can set one of these to true to skip that part of NPC generation when the script runs.  E.g., setting skipoutfit to true will leave all your created NPCs without an outfit, and skiptintlayers will cause them to be created without any defined tint layers.</p>

<p>Then there is the processesps boolean.  This user variable is true by default, and allows the user to process assets in loaded esp files in TES5Edit.  When true, it will prompt the user to use assets in each loaded esp file whenever the script is run.  Set it to false to remove these prompts and only use assets from .esm files.  esm file assets are automatically loaded when the script is run, so make sure you only load the .esm files that have important NPC assets when you start TES5Edit with the purpose of generating NPCs.</p>

<p>Then there is the pre string.  This is the prefix string used in NPC editor IDs before their editor ID is set to their name.  You probably don't need to bother with this.</p>

<p>Finally, there is the debug boolean.  Enabling this boolean variable will cause the script to print more messages to the log.  Enabling it is useful if you want to make sure you're properly entered outfits in the outfits.txt file, or if something isn't working and you want to see why.  If you have a problem with the script that you would like resolved, please enable debug and post a copy of your message log after attempting to run the it.  Saying "it's not working" without providing useful information (as is included in the message log) will severely impede people's ability to assist you.</p>


<h3>Code Modification:<a name=m12></a></h3>
<center><div class="imgbig" style="height:380px"><img src="images/img12.png"></img><br>The beginning of the tint layers section of the script's code.</div></center>
<p>If you want to take your NPC generation to the next level, you could modify the script's code.  The Tint Layer section is probably the easiest, and most interesting area to edit.  You can find this area of the code from lines 1077 to 2317. (yeah, that's over half the script!)  If you're really motivated to adjust the randomly generated tint layers from the values I painstakingly researched and chose you can send me a private message on the nexus forums.  :)</p>



<h2>Armor Mod Builder<a name=m13></a></h2>
<br><br><center>
<div class="imgbig" style="height:630"><img src="images/img18.png"></img><br>The Armor Mod Builder window.</div>
</center>
<p>Armor Mod Builder builds a standalone armor mod using user input values and a folder of .nif files.  Generates Armor records, Armor Addon records, and can generate Constructable Object records (recipes) as well.  Supports 6 armor pieces: Cuirass, Boots, Gauntlets, Helmet, Shield, Cloak.</p>
<h3>Basic Usage:<a name=m14></a></h3>
<dl><dt><strong>Step 1:</strong> Open TES5Edit with the master/plugin files that have ingredients that you'd want to use in Constructable Object records.  (Usually just the Bethesda Master files)</dt>
<dt><strong>Step 2:</strong> Apply the script, no record selection necessary.</dt>
<dt><strong>Step 3:</strong> Specify the parameters you wish to use for building the Armor Mod.  Parameters are listed below:</dt>
<ul><li>Create constructable object records (recipes): Check this box to create recipes for the armor pieces created by the script.  Checking the box will make the Item and Condition sections available to you.</li>
<li>Items: Click the [+] button to create a new item entry, or the [-] button to remove an item entry.  For each entry you can specify the item you want to use and the base count you want to use for that item.  The base count is the amount of that item that will be used in the recipe for the cuirass armor record.  Other armor pieces will require smaller amounts of the item.</li>
<li>Conditions: Click the [+] button to create a new condition entry, or the [-] button to remove a condition entry.  For each entry you can specify the condition function you want to use from a list that includes the functions I can imagine someone using for an Armor Recipe (it doesn't include all possible condition functions).  Then you can specify the comparison type, the comparison value, and the condition variable (e.g. perk for a HasPerk condition).  Finally, you can tick a checkbox if you want the recipe to be usable when only some of the set of conditions are fulfilled (the "or" checkbox).  E.g. Condition 1 OR Condition 2.</li>
<li>Armor prefix: The prefix used by the armor pieces.  This will be used in the EditorID and Full names of the records created for the armor.</li>
<li>Armor type: Heavy Armor, Light Armor, or Clothing.</li>
<li>Armor material: this governs where the armor will appear at the forge if you chose to create Constructable Objects for it.</li>
<li>Base armor value: This is the base DNAM (armor rating) for the armor set you're creating.  The base value is what is used on the cuirass.  Values for other pieces of armor are extrapolated from the value used for the cuirass.  For reference it starts at 12, which is the armor rating of an Iron Cuirass.</li>
<li>Base weight value: This is the base weight for the armor set you're creating.  Once again, the base value is what is used on the cuirass.  Values for other pieces of armor are extrapolated from this value.</li>
<li>Base gold value: This is the base gold value for the armor set you're creating.  This will be the value that is used on the cuirass.  Values for other pieces of armor are extrapolated from this value.</li>
<li>Meshes directory: This is the subdirectory from your Skyrim directory where .nif files for the armor you are creating can be found.  E.g. Data\Meshes\Armor\iron\ is the subdirectory for Iron Armor .nif files after they've been extracted from their BSA.  This directory must physically exist (it can't be in a BSA archive), and must contain only the nif files associated with the Armor you're creating.  For more information on the meshes directory and how the script deals with .nif files, see the "Nif Files" section.</li></ul>
<strong>Step 4:</strong> Click OK and review the .nif file tagging the script has performed.  If everything looks correct click OK again.  See the "Nif Files" section for more information on this subject.
<dt><strong>Step 5:</strong> Select the file you want to build the armor mod in, or create a new one.</dt>
<dt><strong>Step 6:</strong> Watch it go!  The script should create Armor Add-on, Armor, and (if you selected it) Constructable Object records for your Armor mod, as per your settings.  If models aren't found for specific Armor pieces, those armor pieces will not be created.</dt>
<dt><strong>Step 7:</strong> Close TES5Edit and save the file you created the Armor Mod in.  Feel free to test it out in Skyrim, it should work perfectly.</dt></dl>


<h3>Nif Files:<a name=m15></a></h3>
<center>
<div class="imgbig" style="height:480"><img src="images/img15.png"></img><br>The Nif Tagging confirmation window.</div>
</center>
<p>The script doesn't do anything with the nif files you use for the Armor Mod.  That is to say, you need to have the .nif files ready before running the script, and the script doesn't look at them for anything other than their filename.</p>

<p>The script tags .nif files based on their filename.  Thus, it's important to follow a certain naming scheme if you want the script to automatically tag your .nif files.  Alternatively, you can manually tag them at the "Confirm Nif Tags" window if you don't want to follow a naming scheme that the script supports.</p>

<p>Naming conventions .nif file automatic tagging:</p>
<ul><li>The script recognizes if a .nif file corresponds to an armor piece based on whether or not a substring exists in its filename.</li>
<ul><li>Boots substrings: boots, feet, greaves</li>
<li>Gauntlets substrings: gauntlets, gloves, hands</li>
<li>Cuirass substrings: cuirass, outfit, body</li>
<li>Helmet substrings: helmet, hood, head</li>
<li>Shield substrings: shield</li>
<li>Cloak substrings: cloak</li></ul>
<li>The script recognizes if a .nif file corresponds to a specific gender based on substrings or subdirectories (folders within the specified Meshes Directory).  E.g. a nif file found in the "m\" subdirectory is considered "male".  The script looks only in the specified subdirectories for .nif files, so other subdirectory names aren't supported.</li>
<ul><li>Subdirectories: "male\", "female\", "m\", "f\"</li>
<li>Substrings: male, female, "m" as last character of filename before _1 suffix, "f" as last character of filename before _1 suffix.</li></ul>
<li>The script recognizes special helmets via the following substrings:</li>
<ul><li>Khajiit helmet: kha</li>
<li>Orc helmet: orc</li>
<li>Argonian helmet: arg</li></ul>
<li>The script recognizes first person models via the following substring:</li>
<ul><li>"1st"</li></ul>
<li>The script recognizes world models via the following substrings:</li>
<ul><li>mgo (male world model), fgo (female world model), go, gnd, world</li></ul>
<li>The script ignores files ending with the _0 suffix.</li></ul>

<p>If you're still confused after reading all this, I recommend you look at the Glass, Orcish, or Iron armor .nif files.  (and possibly every vanilla Armor's nif files).  These armors follow a correct scheme, so if you replicate their naming scheme auto-tagging should occur just fine.</p>

<p>What follows below is a list of the nif tags the script uses, which you can see in one of the dropdown menus in the Confirm Nif Tagging window.  These tags are pretty self explanatory.  fp is short for first person, unknown is used when a nif file isn't tagged, and nif_0 is used for nif files ending with the _0 suffix (these files are ignored).</p>
<ul><li>fp cuirass</li>
<li>fp male cuirass</li>
<li>fp female cuirass</li>
<li>fp gauntlets</li>
<li>fp male gauntlets</li>
<li>fp female gauntlets</li>
<li>world cuirass</li>
<li>male world cuirass</li>
<li>female world cuirass</li>
<li>cuirass</li>
<li>male cuirass</li>
<li>female cuirass</li>
<li>world boots</li>
<li>female world boots</li>
<li>male world boots</li>
<li>male boots</li>
<li>female boots</li>
<li>boots</li>
<li>world gauntelts</li>
<li>female world gauntlets</li>
<li>male world gauntlets</li>
<li>gauntlets</li>
<li>male gauntlets</li>
<li>female gauntlets</li>
<li>world helmet</li>
<li>female world helmet</li>
<li>male world helmet</li>
<li>helmet</li>
<li>female helmet</li>
<li>male helmet</li>
<li>argonian helmet</li>
<li>khajiit helmet</li>
<li>orc helmet</li>
<li>argonian female helmet</li>
<li>khajiit female helmet</li>
<li>orc female helmet</li>
<li>argonian male helmet</li>
<li>khajiit male helmet</li>
<li>orc male helmet</li>
<li>shield</li>
<li>world cloak</li>
<li>cloak</li>
<li>unknown</li>
<li>nif_0</li></ul>

<h3>User Variables:<a name=m16></a></h3>
<p>The script has two user variables that you can enable/disable in the script's code.  You will find a section of the script immediately after the declaration of global variables (line 52 as of v1.2) from which you can control these variables.</p>

<p>The first boolean is called "debug".  You can enable it to see some debug messages in your message log when the script runs.  This feature isn't fully implemented throughout this script, so you probably don't need to use it.  (initially it was used to debug the nif file tagging, but seeing as you have the Confirm Nif Tags window, you probably don't need to do that...)</p>

<p>The second boolean is processesps.  As it was with the NPC generator, setting this boolean to true will allow you to process assets in loaded esp files.  You will be prompted for each loaded esp file if you set this boolean to true.</p>



<h2>QuickChange<a name=m17></a></h2>
<br><br><center>
<div class="imgbig" style="height:460"><img src="images/img14.png"></img><br>The QuickChange window, with one of each function present.</div>
</center>
<br><p>QuickChange allows the user to perform batch modifications to selected records.  Add elements, change element values, remove elements, apply a formula to integer-valued elements, copy elements, or import element values from a csv file.  This script can do it all!</p>
<h3>Basic Usage:<a name=m18></a></h3>
<dl><dt><strong>Step 1:</strong> Open the files you want to make modifications to in TES5Edit.</dt>
<dt><strong>Step 2:</strong> Select the records you want to make the modifications to and apply the script.</dt>
<dt><strong>Step 3:</strong> Click the [+] button to create a new function entry, or the [-] button to remove a function entry.  For each entry you can specify the function you want to use and the parameters for the function.  Below is a listing of the available functions and their parameters:</dt>
<ul><li>Add: Creates the element at the specified &lt;Path&gt;.  If an element is greyed out on a record this is the function you use to create it.  If the &lt;Value&gt; field is edited and not blank, the element will be given the Edit Value entered.</li>
<li>ElementAssign: Creates a new list element at the specified &lt;Path&gt;.  E.g. "Conditions" will create a new "Condition" element.  If the &lt;Value&gt; field is edited and not blank, the element will be given the Edit Value entered.</li>
<li>Remove: Removes an element at the specified &lt;Path&gt;.  If you edit the &lt;Index&gt; field and it is not blank, an element will be removed from the list at the specified &lt;Path&gt; at the specified &lt;Index&gt;.  NOTE: Index is 0-based.  That means the first element in the list is at index 0, the second at index 1, etc.</li>
<li>Replace: Replaces the value of the element at the specified &lt;Path> with the specified &lt;Replace&gt; value if its current value matches &lt;Find>.  Enter * for &lt;Find&gt; to use the &lt;Replace&gt; value regardless of the found value.</li>
<li>Formula: Applies &lt;Formula&gt; to the integer-valued element at the specified &lt;Path&gt;.  Supported operators: + for addition, - for subtraction, * for multiplication, / for division, and ^ for power.  You need a space before and after each operator except for the power operator ^ and the division operator when it is used after a parenthesis.  Parenthesis are supported, and I recommend you use them as much as possible.  x is the variable for the starting value.  Some examples:</li>
<dl><dd>2 * x + 50</dd>
<dd>x^2 - 1</dd>
<dd>((3 * x) + x)/2</dd>
<dd>((5 * x)/2)^2 - (2 * x) + 4</dd></dl>
<li>Restore: Restores the element at the specified &lt;Path&gt; with values from the chosen file.  This only works on override records that have a lower override or base record in the specified file.</li>
<li>TemplateRestore: Restores the value at the specified &lt;Path&gt; on a weapon or armor to the value used by its template record.  (e.g. for enchanted weapons/armor)</li>
<li>Copy: Copies an element from the specified "File \ Group \ Record \ &lt;Path&gt; \ <Index>" to the selected records.  If &lt;Index&gt; is left unedited or blank, the entire element at &lt;Path> is copied.  NOTE: Index is 0-based.  That means the first element in the list is at index 0, the second at index 1, etc.</li>
<li>Import: Imports values to the selected records from a .csv file exported with QuickDisplay.  The default path for csv exporting is the default value for the &lt;FilePath&gt; field, but you may have to change this if the path doesn't match the path of the csv file you want to import values from.</li></ul>
<dt><strong>Step 4:</strong> Click OK when finished.  The script may encounter errors if you entered incorrect paths or values for your chosen functions.  See the User Variables section for more information on these errors.</dt>
<dt><strong>Step 5:</strong> Verify that the modifications were executed correctly, and continue editing the file until done.</dt>
<dt><strong>Step 6:</strong> Close TES5Edit, saving the file(s) you edited.</dt></dl>



<h2>QuickDisplay<a name=m19></a></h2>
<br><br><center>
<div class="imgleft" style="height:380"><img src="images/img17.png"></img><br>The QuickDisplay window with some entered paths.</div><div class="imgright" style="height:380"><img src="images/img23.png"></img><br>A csv file exported with QuickDisplay in OpenOffice Calc.</div>
</center>
<br><p>QuickDisplay allows the user to quickly display and export values from selected records.  Enter the paths you want to get values from, choose your export options, and you're done.  Can be combined with QuickChange to export values, change them, and then import them back.</p>
<h3>Basic Usage:<a name=m20></a></h3>
<dl><dt><strong>Step 1:</strong> Open TES5Edit with the files you want to display values from.</dt>
<dt><strong>Step 2:</strong> Select the records you want to display values from and apply the script.</dt>
<dt><strong>Step 3:</strong> Click the [+] button to create a new display entry, or the [-] to remove a display entry.  For each entry you need to specify the path you want to get values from.  The data type should be string in almost all circumstances.  See the User Variables section for more information on how to use the other data types.</dt>
<dt><strong>Step 4:</strong> If you wish to export the values to a document for later viewing check the appropriate box.  CSV files can be exported, modified, and then re-imported, while txts can only be exported.</dt>
<dt><strong>Step 5:</strong> Click OK.  The values will be posted in the message log for the selected records at the specified paths, and exported if you chose to do so.</dt></dl>


<h3>User Variables:<a name=m21></a></h3>
<p>The script has two user variables that you can enable/disable in the script's code.  You will find a section of the script immediately after the declaration of global variables (line 27 as of v1.3) from which you can control these variables.</p>

<p>You should only have one of these user variables set to true at any given time (you can use both, but the script will only export native values if you do).  The two are user variables are booleans called editvalues and nativevalues.  editvalues is true by default, and allows you to deal with the greater majority of values as strings as they appear in TES5Edit.  Setting nativevalues to true will allow you to get at the native values associated with certain elements.  E.g. integers values.  You probably don't need to use native values most of the time, unless you're dealing with flags or something.</p>


<h3>Editing Exported.csv<a name=m22></a></h3>
<p>If you choose to export values to a csv file you can then edit the values in this csv file and then import them using QuickChange.  Editing the csv is pretty easy, all you need is Microsoft Excel or OpenOffice.</p>

<p>When you first open the csv file the columns may be too small for the content.  In Microsoft Excel you can fix this by selecting the cells, choosing format, and then clicking AutoFit Column Width.  In OpenOffice you can fix this by selecting the cells, clicking format, going to columns, choosing Optimal Width, and clicking OK.</p>

<p>Once you've resized the columns you can edit their content.  Don't touch anything in the record column or anything in the first row, as this information is how QuickChange will know where to apply the found data when importing.  The rest you can change to whatever values you want to use.  Once you're done, save the csv while preserving old formating, run QuickChange with the records you exported values from selected, and use the Import function.</p>



<h2>Replace FormID<a name=m23></a></h2>
<br><br><center>
<div class="imgbig" style="height:250"><img src="images/img21.png"></img><br>The Replace FormID window.</div>
</center>
<br><p>The Replace FormID script allows the user to replace all references to a given FormID on the selected records with a reference to a different FormID.</p>
<h3>Basic Usage:<a name=m24></a></h3>
<dl><dt><strong>Step 1:</strong> Open TES5Edit with the files you want to Replace FormIDs in.</dt>
<dt><strong>Step 2:</strong> Select the records within which you want to replace a given FormID with a different one and apply the script.</dt>
<dt><strong>Step 3:</strong> If you don't already have the FormIDs you want to find/replace memorized or written down somewhere check the "Allow loading of formID lists" checkbox, else enter the 8-character hexadecimal FormIDs and skip to step 5.</dt>
<dt><strong>Step 4:</strong> Select the file from the first dropdown list, the signature of the group from the second dropdown list, and the EditorID [FormID] from the third dropdown list for Find and Replace.</dt>
<dt><strong>Step 5:</strong> Click OK.  If you selected any records in Bethesda master files (e.g. Skyrim.esm) proceed to step 6, else skip to step 7.</dt>
<dt><strong>Step 6:</strong> Select the file you want to create the override records in, or choose -- CREATE NEW FILE -- to create a new one.</dt>
<dt><strong>Step 7:</strong> Verify your modifications and close TES5Edit, saving the modified files.</dt></dl>
<br>
<br>
<br>
</BODY>